#!/usr/bin/env node

/**
 * Module dependencies.
 */

var clients = [];
var clientsFront = [];
var app = require('../app');
var debug = require('debug')('nextnodeapppug:server');
var http = require('http');



var serverIo = require('http').createServer();
var io = require('socket.io')(serverIo);

io.on('connection', function (client) {
  clients.push(client);

  client.emit('onConnect', 'Connected');
  client.on('event', function (data) { });
  client.on('disconnect', function () { });
  client.on('userMessage', (message) => {

    console.log('I get message from ', client.nickname, 'client: ', message);
    let parcel = {
      message,
      nickname: client.nickname
    }

    client.emit('message', parcel);
    client.broadcast.emit('message', parcel);

  })


  client.on('identify', function (name) {
    client.nickname = name;
    let ioClients = io.sockets.clients();

    Object
      .entries(ioClients.connected)
      .map((ioClient) => {
        clientsFront = [];
        clientsFront.push({
          id: ioClient[0],
          name: ioClient[1].nickname
        });
        client.emit('clientList', clientsFront);
        console.log(ioClient[0], ioClient[1].nickname)
      });
    clients.map((el) => {
      clientsFront = [];
      client.emit('clientList', clientsFront);
    });
  });
});



serverIo.listen(3001);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


